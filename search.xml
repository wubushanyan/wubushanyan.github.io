<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>first_move</title>
    <url>/2021/07/27/first-move/</url>
    <content><![CDATA[<h1 id="这是这个静态Blog的第一篇文章"><a href="#这是这个静态Blog的第一篇文章" class="headerlink" title="这是这个静态Blog的第一篇文章"></a>这是这个静态Blog的第一篇文章</h1><p>由于之前的服务器没续费导致之前用wordpress写的好多文章都没了，不过我在尝试找回。</p>
<p>这个Blog的意义在于我想将之后我学到的东西尽力的记录在这里，以备后续回忆。</p>
<span id="more"></span>

<p>祝我好运！</p>
<img src="/2021/07/27/first-move/1.png" class="" title="图片1">

]]></content>
      <categories>
        <category>告示</category>
      </categories>
  </entry>
  <entry>
    <title>发布与编辑</title>
    <url>/2021/07/28/hello-world/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="06b19f2cbc97ddff1b9a3f476dc6097ace5cdaf54dda90450bac391e81376214">d8beaf17918677a1a0af16d3cd9aee9eab59edc807834b0934cf7fba67c58ef36f733f736b8e7e4ae048bb44ccdfd68bf4ae09aaa41345656db0054473e54b5dd16e8aef89f45e458cf02ec511678f4b2cae4d1b4161e451d2e47b6b50fba95f647d689cf676b48030969cf7991cc26efdcffe3865fb61f845325fadf67db706c6029b6b2b37d6977b5bfbdf018d4c9789072aa92864a3e19ef26944bafa0abaddcdcd3fe277d7ea4bad2793d6480f706e47ead29d48e45587eb9a91ad2d7a982035a8b42c0b6d98702c67df27b6f42802c792a5746c20b4374c13f0b1a5f5185531d8d9fafaf7426aa98af8516f413ae15934dfef07f9eee81ab97484b98a07a71b1272fdfa99b5a167f5c688b29634271c99dd2127624baebca534f2422f024daf4962286bcc8a1a06c9fe024888b5996ba673a1dee2254cfdc415c2113b7f7e0609f1564711855aa3ce386b165c8b6ffa35e2ade626afef2db29be4c2388913627a75d492028277f881e56e972dddbca35866b1aa3d7172c12b3ab8095e17516693acb7a78b01faf2279f5ac1b616396daf2bc3ea8634a85836910f99144ba0593fdba372ec3e10f0946a8e1788e6bf8747691f464060df82572e7e75e78edc306c20e36cf7028e3164801437c27490cd764cf9d04c0fa467fb2e35b181641fd5d656d8dab182cf25c9da62f588ec1c8eec4dca4c7f420788ead519b0995cdd58f0a2f4754b643bceefcb0f1259348e626897860434baf7712c363c4150123e2d0f4c81394cfcf2ab538797e8d10ddd387fca66fdc7bec8b6d31fa7f178be7d3e061aff8892df1851885505f13d5d4abbba4c301d414353e9ca4bcf90af3c244204cc3efdc53d3020c938b39082e75d75f1d243bc759d3a0afcd8b54ed9955526f5a18ceaf6a00e3288974f271dc3d17d09a65a53c1e552c4dd2cf46e14d0f49055820db10302ff3efc9696a9432bf8489e4ca752c597f8a3dee4536e32c10ecd7dddf13954560727c51f20268dc986dced09fd3d2fbef1d752774dd5e3b4438b3880ed054789b2f978373e3c9e75bef45d4d191392efa83d423ebc445ede25c8bf12730409ea1b4d73fb322413c89cff683f6bf78f533190ba6024e43dbdee3693eb08e09d1a6ef9997ab028ce61fd92fd71cf8fc33ff3e48c6dc8d79a8b81bd1273915cf6f30c435d5c98fc18b84b8aa1736be6e949f46af4df4db4d0029c79b3229623261103d22e941e66f13a503fb10ea9e5699eedb50c36be1ebb29f528b9bd0636cd3fa815001984642c95afa7a623562e0eeca2df798365a884cfdb94bcec0013456b69f119d324d09adf5ab49221641242f897bbb78db9858f6e16c4f59f2672178223612b72d2acd671c83bb3de8c3e82d968d3a8f655bea29d79ba79e776e5066e3379e04c6fc51ef47fd0e65391c0bce583b86c5b3380d26e05d092161b58941b9f52df1545cc7bfb97c0b717351505ea31d8a377a9a0e3069e6022d6c825f97e7132f1887e8349296045a44fe50ade7a86ce59b314f89765578a9ff4fa5bf7dced6f3ef37c096b5cd0fbd96f7aff3a25d536f00edc854eaccfcc8e183ae691368b60a5b601d3a3b93017224928b3a8f11de6c9a008d0d52d6bdf7e6f1c496fb8ec191a1a44a203d0d6b573098c721bddcfb4922befc2a581166516bc1439a2d54756087668048ed6a831d8911193487ea7614c20be84768c29469de75174d0827973ae8e0821aad795884f29b4a3cd328059ccbe313b1332b37c5ff9515f87e273d3bc54daa2b28dd82ccbe712ac4def55948128d98bf6b10df4a822bf66fd362734d02168f6bf0b4a296cfd9f929276879ca709f33a6b5b4256966c4e2a16d828ed63acb2a2aa6f4ef5fec07ca3875b70a599e84ecdb37b09749b86f7e60efa8e7ea45100ab09381e49018418b630b380ec0f10fa02d0de03841223984d05b2e2fe475a3dfcf732daaa2927e842b2a47455a4aaa8bbd84abfb3214f5233ad5d11285ec2a09e4f68deca4778f3cf4f0381c125bca47dbcd5b01d5704c74054f6feb6ae5d134b358256b535399e0cd53fa971f7d39a33fd84d2215a8b8a5dc24436a1a47370ffe9982a2c937d12ac4fcb92b3f451e0c9c2c98e40e806e6ea4405a4e1dc781d14df11469d024ecbd4b6b9bad3376b4c6ac09d8ff7da811a0972fb7acef39c8b5eb9ff405cd00cd9f1b4b23d7b64d969e88ea644e7281900942733554180bad7703406de3b89e3172679e7c925ef4c4c46b6ffd7dbc1e3a6f6767ae6d70b92d67eb49ec29dfae3a733371f217711517db63c58acefa8d66c4a114be6948b0c7c18c47869c0d522a12d021723543d3dac241158431a023ab25f2537aa489b7101a5bf4e33796f624b4d90657b4c29e52747b01bcb8d66b6bec2057cf80aa64a4fe114e5a6eefc833127a9137446fb8593c5f9258349271cd3d121ff437b83e6b3d00cbe0a8e5b428c3ca49c4d3a75865bf6f45906937743e8f96939160e24c5f57d4262f5298f48010c68fe939f56d0518f9b91db9c6e071985c140d6ec1cbe929189e67678f8bbb698083e631e9f5931a4d6354448ef59c0c2a794055f6e4e96e88e80597e3e14dc2d3830c42e679e3aee4c2853a340dfede9fc466a65bf641bf782efaabfa0c307c76cf3503b54e0e5f81258d1b6cdc63ebc79c68a5ed39b623163642f2277a05fecf6d93d5ed3396e534d6bc5837f1f9a076aa37bf0c38bc728964defd605c7d9ba0bf5243149e4791a0db4d853467e2c60a68c618bc3c1fc6407914d21c77d3663b2783a2edd0d81cc1ae3c5ccbcc264b3cff26d084c96d9b70e5443d4a59fb2b4ec436cbb8f9474ae10bed156cdf3749b4047864b406ed8df3dff4211d915b9cff16dbe2ddade7ef0cf4328bacce4a5d76194a6deab2e222dd91332d16a4c4f64fd5d1fa3b6347df6a7355e82ac20870d1d2713c1644d2bb69bde6ac1c26755c18146bca5e4a1fac23553d390482e3e08ab9691402b9830f6ac71f3620edabc4888b88b43106e81cada4d595190f5b992838a3cb214dea53ba1c3ff1f60bd5813d7340834b3112344f8071c8414ef7695db845c53d2eb4cfec53768c93cce9e40928df9ab6288434ceaf7fdf7ad124553d701b614400dc6d66bfbea9d38928f427790c50858cab5e6cda3840006c99c5dfe36561318f601be8cfd68622c27f6f61e02a1e224851c7346013b66efcd53fcb9092c478ebe97f0a3a193e27f53591658b85cfbc6aa67f497f38c3d5e1c85c33ab588b1c3973243521a687b6f5b8a1c84769eb3152f5003388efa6afdab61d98a10ef587e3616292381174cf99e7057967dd270a0d725727a4726fa51e9562ac7032774f304485d6b29e74f2919fa105ea83305d4ce5a2d8abe13fa8bf394de9221acea507bff45a38ee5b718ed076c52912912397630a4001ff8a9b12f717abf199c16af0609f2f2419f2c2f1f083ce7449ce8078c847b70b708eb90aad8ba4f13ef78d12bede23c095c11b8b0bf5d8a9d2a06b9b8ad5b7f56516236e5c84940bda71237dd425b397e748a85a276d4ccbcd8313870b638d3ec92587cfd997dbed1170a5ded32bc4a7da0c1933604a363de2628bf03ea7737b2fd412fa888495de3e5040e3b71de7eeb592e09b63e435eb040fb05e573eccbe7daef2d41c10f9f0e7911f0c2084065f062209905bb46e6f433a97cfa6dda095d1db2e5a1f62c5949635d7de318bce6b4d8dbd3c6bfb869c2f5a3ad026bcd0ae56127e84be83dd9ba877889e5b9133112bc93edf3b77de3a450f71b1364c0846f926f4c066865d30ffb7bbee927c536b048c51e877f8a505868a6e47356de608ae3b758a708b352adba558b2ec1053c056e4e9d00ec82c30d5d0245436972289e4ac05fc0fef30ffaf74240c7aefa6a5e42ecfcf9d52371dc552972d372136cac0dc4cf3c86e9c7e0615c111351864870e090c1266c3115015c84fa77882250e617ff967f851b9743d5ebfd1c02e0e82abb59bee6aa11413bf842e4737e73834a457f437c0b73b856c205e4cf9da99d6d632768fd46a19ad2c5f23b0b32313c74c07b4cd8cc50ef21901d4c46f7da8d4031f7eb940bf17977661478ab9198f90ba480fbabd84c6fc0108f737d644fab7a93bb4e77914c2bdedc420347ae777e8c56ba71fa8ba2c7c412af9246b7b612af3fc284bf8f230cb6fe7a452c43a8794d6186750d81a5e2538b47833e546464e6c9ca7ed0447447aba47ddf4ab90ccd8a0cf12db6a1711bbf55aa42639e553f5db618996c649829bef01e9cbdef56fec39493bb48baa30f8b6c455292150b4d7573fe83190db27b55ead37df134d3e088654e9b93424d4e459825847bfefe3daee37ae806fb4b7b060c63a0287c2935cffe9ed4f8129d6d25b23b2fb1edcd392ec1e650d6144c9dbeb57655e5a5c746b627e1127b3e9091ba3bd7b5f787c6726c7cd661b6e3c512cfdf6f534b0667d486d5a399f522119ba4d5d9279dd63fabbdc1705883b22248c572da4b13cd216365f0e4451d624b484a2d410da5ef012a462dbfa0d3b6f6df40c68a093fe43f62ab24cf7c93a94ad591d6997a0b0b0ff49d47f5a77443b6933fb7f7bb259ddf28070767fc665a0defe5276c78a0faa070a9b269e63de899a770cdb0a7e4d5f3e8a97298f5ec5e02bb84077748d4dc3c3b3654eeb771933379b947f9a1298a00cb8f51e58b5ace859049d13822edf115c52ccf01c48f7651d64f57bb648a9398a1766bd893546e70d656c8b88612dc623dec0a1618d7d8993ecb153d77d819551df19743bb906ad5711d98849ad647fe11aa53e447819f9518dba5199c87141e29179d2a1da3310b1e75971c8cb286701975d44ff784ee3a50a89329a1a6f5e57b69ada71f3ac5702bc0ddc99fb75822defef72749abc5c4bd79e9c3078e0b34cde2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>加密测试</title>
    <url>/2021/07/30/%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9d177eea1ffce44bf4a58873a39eee9cd8d45a004f32272d62ed362519747208">165d50f05814027fb7fe5e4ae8a088d85e75c61d48a21fe4f92c66618cda8718aded696b6d7976ed7665f2fd4f349bf2f624708d3a6f73318e6b9fe92f2e9ba753a4e70a9524add18a09baee09a1409f09e1b7c6fadd8d57ca48e619fa97df018213bb127f7b99b6dc4b9202e2fffcb3e0427c398af58b5b81a9c7f46ee2ec352e64217470d45b88521e07918191614585ea8ca6f5c2f9cb635793882c93eece438f491ac5cf04418382d7961b7dbe25ae23b32eef2d62f6722316dcc22298c7a48c7bea9198dc8a8cc6535a6b8167a169483e91f1804591b14f6538635893c1e9666688724bbe4e2785b2db7d8367e9be8122a410872e99fd21eb9be80b433ef87fee77b86917da04b181be09d5ee34b47e761b95e978ac09db683514f343e4e5a06bd4ec34bd5e3c38c8533063c19d9aa6611deb7ccfa62353b14670d375f0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>告示</category>
      </categories>
  </entry>
  <entry>
    <title>基于ardunio的蓝牙开门装置</title>
    <url>/2021/07/28/%E5%9F%BA%E4%BA%8Eardunio%E7%9A%84%E8%93%9D%E7%89%99%E5%BC%80%E9%97%A8%E8%A3%85%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="蓝牙舵机"><a href="#蓝牙舵机" class="headerlink" title="蓝牙舵机"></a>蓝牙舵机</h1><p>我用这个来开宿舍门的，可惜后面未实装，但在家里试过了可以。</p>
<p>其实装置本身很简单，总共三个模块 。</p>
<p>分别是<code>Ardunio</code>、<code>HC-05</code>、<code>舵机</code>，都是上淘宝买的，加加起来差不多50左右。</p>
<p>对了设备之间连接的杜邦线之类的也别忘了。</p>
<span id="more"></span>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实整个装置的原理非常简单，就是通过设备向蓝牙模块<code>HC-05</code>发送特定的字符，然后蓝牙模块将受到的字符传输给上位机，也就是<code>Ardunio</code>，然后经过一段很简单的if判断是否为正确字符后就可以向舵机发送指定电平让舵机转动从而带动某样东西。</p>
<p>理论上这个装置不仅仅是开门，有很多地方都可以用到，只要传动装置的力够，我买的舵机只有10N，差不多可以拉动一公斤的东西。</p>
<p>哦对了，如果真实装最好考虑一下电源，用电池或者小充电宝啥的，值得注意的是现在的充电宝都有放电检测，<code>Ardunio</code>的耗电太小可能不在检测范围内导致充电宝断电，非常难受。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SoftwareSerial.h&gt;</span>          <span class="comment">//库文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line">Servo myservo;  </span><br><span class="line"><span class="function">SoftwareSerial <span class="title">BT</span><span class="params">(<span class="number">8</span>, <span class="number">9</span>)</span></span>;           <span class="comment">//设置蓝牙与板子的连接端口。  pin 8  接蓝牙的 TXD    pin 9 接蓝牙的 RXD</span></span><br><span class="line"><span class="keyword">char</span> X;                              <span class="comment">//定义一个变量存数据。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);              <span class="comment">//串口监视器通信速率，38400</span></span><br><span class="line">  Serial.println(<span class="string">&quot;蓝牙连接正常&quot;</span>);     <span class="comment">//串口监视器显示蓝牙正常状态</span></span><br><span class="line">  myservo.attach(<span class="number">10</span>);  <span class="comment">// 将引脚10上的舵机与声明的舵机对象连接起来</span></span><br><span class="line">  BT.begin(<span class="number">9600</span>);                  <span class="comment">//蓝牙通信速率，默认一般为 38400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span>                         <span class="comment">//大循环，执行。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Serial.available())           <span class="comment">//检测：【串口】如果数据写入，则执行。</span></span><br><span class="line">  &#123;</span><br><span class="line">    X = Serial.read();              <span class="comment">//把写入的数据给到自定义变量  X</span></span><br><span class="line">    BT.print(X);                    <span class="comment">//把数据给蓝牙</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (BT.available())               <span class="comment">//检测：【蓝牙】如果数据写入，则执行。</span></span><br><span class="line">  &#123;</span><br><span class="line">    X = BT.read();                  <span class="comment">//把检测到的数据给到自定义变量 X</span></span><br><span class="line">    Serial.print(X);                <span class="comment">//把从蓝牙得到的数据显示到串口监视器</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(X==<span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;检测到开锁信号，正在开锁&quot;</span>);</span><br><span class="line">    myservo.write(<span class="number">180</span>);            </span><br><span class="line">    delay(<span class="number">8000</span>);</span><br><span class="line">    X=<span class="string">&#x27;L&#x27;</span>; </span><br><span class="line">    Serial.println(<span class="string">&quot;开锁时间结束&quot;</span>);  </span><br><span class="line">    delay(<span class="number">100</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(X!=<span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">  &#123; </span><br><span class="line">    myservo.write(<span class="number">0</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>上面的代码并未有什么很难的地方，就是一个基本框架。可以在里面添加很多东西，比如 <code>myservo.write(180);</code>这里是舵机的转动角度，理论上配合合适的时延和不同的转动角度可以办到一些更加精细的活。</p>
<p>还可以在<code>if</code>里添加<code>else</code>做到更多的判定。总的来说这就是个框架，补一补还是能在很多地方的。我懒，就算了，开个门得了。😂</p>
]]></content>
      <categories>
        <category>ardunio</category>
      </categories>
      <tags>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>自学C++_01</title>
    <url>/2021/07/29/%E8%87%AA%E5%AD%A6C-01/</url>
    <content><![CDATA[<h1 id="初学C"><a href="#初学C" class="headerlink" title="初学C++"></a>初学C++</h1><p>在学校的课程里，大一曾学过<code>C语言</code>，当时啥啥分不清，天真的以为<code>C</code>就是<code>C++</code>毕竟当时是一点都不了解，后来在深入学习后才明白<code>C</code>和<code>C++</code>是两个东西。</p>
<p>由于带着<code>C</code>的基础，所以在自学过程中会粗略学习基础，例如输出<code>函数</code>、<code>变量</code>、<code>注释</code>、<code>基本语法</code>。</p>
<p>当然，我还会着重<code>指针</code>相关的知识，毕竟这才是痛点。</p>
<span id="more"></span>

<h2 id="输出Hello-World"><a href="#输出Hello-World" class="headerlink" title="输出Hello World"></a>输出Hello World</h2><p>几乎在我学习和了解到的计算机语言里，都是从如何打印Hello World开始的，比如<code>C</code>、<code>Python</code>、<code>JAVA</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与<code>C</code>中的<code>printf</code>还是不太一样的。</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>和<code>C</code>一样，分单行和多行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>依旧和<code>C</code>一样。</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>



<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>也就是无法修改的变量，C++中有两种。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>



<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><table>
<thead>
<tr>
<th align="left"><strong>asm</strong></th>
<th><strong>do</strong></th>
<th><strong>if</strong></th>
<th><strong>return</strong></th>
<th><strong>typedef</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>auto</strong></td>
<td><strong>double</strong></td>
<td><strong>inline</strong></td>
<td><strong>short</strong></td>
<td><strong>typeid</strong></td>
</tr>
<tr>
<td align="left"><strong>bool</strong></td>
<td><strong>dynamic_cast</strong></td>
<td><strong>int</strong></td>
<td><strong>signed</strong></td>
<td><strong>typename</strong></td>
</tr>
<tr>
<td align="left"><strong>break</strong></td>
<td><strong>else</strong></td>
<td><strong>long</strong></td>
<td><strong>sizeof</strong></td>
<td><strong>union</strong></td>
</tr>
<tr>
<td align="left"><strong>case</strong></td>
<td><strong>enum</strong></td>
<td><strong>mutable</strong></td>
<td><strong>static</strong></td>
<td><strong>unsigned</strong></td>
</tr>
<tr>
<td align="left"><strong>catch</strong></td>
<td><strong>explicit</strong></td>
<td><strong>namespace</strong></td>
<td><strong>static_cast</strong></td>
<td><strong>using</strong></td>
</tr>
<tr>
<td align="left"><strong>char</strong></td>
<td><strong>export</strong></td>
<td><strong>new</strong></td>
<td><strong>struct</strong></td>
<td><strong>virtual</strong></td>
</tr>
<tr>
<td align="left"><strong>class</strong></td>
<td><strong>extern</strong></td>
<td><strong>operator</strong></td>
<td><strong>switch</strong></td>
<td><strong>void</strong></td>
</tr>
<tr>
<td align="left"><strong>const</strong></td>
<td><strong>false</strong></td>
<td><strong>private</strong></td>
<td><strong>template</strong></td>
<td><strong>volatile</strong></td>
</tr>
<tr>
<td align="left"><strong>const_cast</strong></td>
<td><strong>float</strong></td>
<td><strong>protected</strong></td>
<td><strong>this</strong></td>
<td><strong>wchar_t</strong></td>
</tr>
<tr>
<td align="left"><strong>continue</strong></td>
<td><strong>for</strong></td>
<td><strong>public</strong></td>
<td><strong>throw</strong></td>
<td><strong>while</strong></td>
</tr>
<tr>
<td align="left"><strong>default</strong></td>
<td><strong>friend</strong></td>
<td><strong>register</strong></td>
<td><strong>true</strong></td>
<td></td>
</tr>
<tr>
<td align="left"><strong>delete</strong></td>
<td><strong>goto</strong></td>
<td><strong>reinterpret_cast</strong></td>
<td><strong>try</strong></td>
<td></td>
</tr>
</tbody></table>
<p>关键字挺多，希望到时候创建变量别给撞上吧。</p>
<h1 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h1><p>1.不能撞关键字（这个没啥好说的）</p>
<p>2.只能有<code>字母</code>、<code>数字</code>、<code>下划线</code></p>
<p>3.在2的基础上，第一个字符不能是<code>数字</code></p>
<p>4.大小写敏感</p>
<p>总结：和<code>C</code>一样。</p>
]]></content>
      <categories>
        <category>计算机语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>访问博客速度问题</title>
    <url>/2021/07/27/%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="托管于Github的静态网页访问缓慢"><a href="#托管于Github的静态网页访问缓慢" class="headerlink" title="托管于Github的静态网页访问缓慢"></a>托管于Github的静态网页访问缓慢</h1><p>大学狗由于缺乏资金，无法长期购置服务器以及域名，所以才使用Github+hexo搭建个人博客，但是Github在国内似乎被墙了，大多数地区访问缓慢甚至无法访问。目前我在想办法，看看能否用别的方法代理网页，大概要money吧，白嫖应该是不可能了。</p>
<p>2021/07/30 <a href="wbsy.netlify.app">添加新访问地址</a></p>
<span id="more"></span>

<p>祝我好运！</p>


<ul>
<li><p><img src="https://z3.ax1x.com/2021/07/29/Wqfkfe.jpg" alt="image"></p>
</li>
<li><p>看起来不太妙啊，后续我考虑考虑买不买域名吧，主要是长期维护的话是一笔不菲的费用。而且这个博客大概也就我自己看看吧。毕竟github屏蔽了百度的爬虫，在国内应该大部分人用的还是百度之类的吧，Google用的人还是少。</p>
</li>
</ul>
<ul>
<li><p>更新 2021/07/30</p>
</li>
<li><p>利用netlify加速解析，国内算是能用了吧。</p>
</li>
</ul>
<ul>
<li><p>目前站点有两个域名</p>
</li>
<li><p><a href="287857652.github.io">287857652.github.io</a></p>
</li>
<li><p><a href="wbsy.netlify.app">wbsy.netlify.app</a></p>
</li>
</ul>
<p>虽然第二个域名挺丑的，但是能用就好，以后考虑绑定自己买的域名吧。</p>
]]></content>
      <categories>
        <category>告示</category>
      </categories>
  </entry>
</search>
