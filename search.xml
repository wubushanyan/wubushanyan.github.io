<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>first_move</title>
    <url>/2021/07/27/first-move/</url>
    <content><![CDATA[<h1 id="这是这个静态Blog的第一篇文章"><a href="#这是这个静态Blog的第一篇文章" class="headerlink" title="这是这个静态Blog的第一篇文章"></a>这是这个静态Blog的第一篇文章</h1><p>由于之前的服务器没续费导致之前用wordpress写的好多文章都没了，不过我在尝试找回。</p>
<p>这个Blog的意义在于我想将之后我学到的东西尽力的记录在这里，以备后续回忆。</p>
<span id="more"></span>

<p>祝我好运！</p>
<img src="/2021/07/27/first-move/1.png" class="" title="图片1">

]]></content>
      <categories>
        <category>告示</category>
      </categories>
  </entry>
  <entry>
    <title>发布与编辑</title>
    <url>/2021/07/28/hello-world/</url>
    <content><![CDATA[<p>本篇是有关于文章发布相关指令以及部分格式编辑方式的文章。</p>
<span id="more"></span>

<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="启动hexo"><a href="#启动hexo" class="headerlink" title="启动hexo"></a>启动hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="渲染静态页面"><a href="#渲染静态页面" class="headerlink" title="渲染静态页面"></a>渲染静态页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<h3 id="部署网页"><a href="#部署网页" class="headerlink" title="部署网页"></a>部署网页</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<h3 id="清除-渲染-部署"><a href="#清除-渲染-部署" class="headerlink" title="清除+渲染+部署"></a>清除+渲染+部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h2 id="文章格式"><a href="#文章格式" class="headerlink" title="文章格式"></a>文章格式</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class="line"><span class="bullet">-</span> 一级标题</span><br><span class="line"><span class="bullet">  -</span> 二级标题</span><br><span class="line"><span class="bullet">  -</span> 二级标题</span><br><span class="line"><span class="bullet">    -</span> 三级标题</span><br><span class="line"><span class="bullet">    -</span> 三级标题</span><br><span class="line"><span class="bullet">    -</span> 三级标题</span><br><span class="line"><span class="bullet">  -</span> 二级标题</span><br><span class="line"><span class="bullet">  -</span> 二级标题</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>基于ardunio的蓝牙开门装置</title>
    <url>/2021/07/28/%E5%9F%BA%E4%BA%8Eardunio%E7%9A%84%E8%93%9D%E7%89%99%E5%BC%80%E9%97%A8%E8%A3%85%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="蓝牙舵机"><a href="#蓝牙舵机" class="headerlink" title="蓝牙舵机"></a>蓝牙舵机</h1><p>我用这个来开宿舍门的，可惜后面未实装，但在家里试过了可以。</p>
<p>其实装置本身很简单，总共三个模块 。</p>
<p>分别是<code>Ardunio</code>、<code>HC-05</code>、<code>舵机</code>，都是上淘宝买的，加加起来差不多50左右。</p>
<p>对了设备之间连接的杜邦线之类的也别忘了。</p>
<span id="more"></span>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实整个装置的原理非常简单，就是通过设备向蓝牙模块<code>HC-05</code>发送特定的字符，然后蓝牙模块将受到的字符传输给上位机，也就是<code>Ardunio</code>，然后经过一段很简单的if判断是否为正确字符后就可以向舵机发送指定电平让舵机转动从而带动某样东西。</p>
<p>理论上这个装置不仅仅是开门，有很多地方都可以用到，只要传动装置的力够，我买的舵机只有10N，差不多可以拉动一公斤的东西。</p>
<p>哦对了，如果真实装最好考虑一下电源，用电池或者小充电宝啥的，值得注意的是现在的充电宝都有放电检测，<code>Ardunio</code>的耗电太小可能不在检测范围内导致充电宝断电，非常难受。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SoftwareSerial.h&gt;</span>          <span class="comment">//库文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line">Servo myservo;  </span><br><span class="line"><span class="function">SoftwareSerial <span class="title">BT</span><span class="params">(<span class="number">8</span>, <span class="number">9</span>)</span></span>;           <span class="comment">//设置蓝牙与板子的连接端口。  pin 8  接蓝牙的 TXD    pin 9 接蓝牙的 RXD</span></span><br><span class="line"><span class="keyword">char</span> X;                              <span class="comment">//定义一个变量存数据。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);              <span class="comment">//串口监视器通信速率，38400</span></span><br><span class="line">  Serial.println(<span class="string">&quot;蓝牙连接正常&quot;</span>);     <span class="comment">//串口监视器显示蓝牙正常状态</span></span><br><span class="line">  myservo.attach(<span class="number">10</span>);  <span class="comment">// 将引脚10上的舵机与声明的舵机对象连接起来</span></span><br><span class="line">  BT.begin(<span class="number">9600</span>);                  <span class="comment">//蓝牙通信速率，默认一般为 38400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span>                         <span class="comment">//大循环，执行。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Serial.available())           <span class="comment">//检测：【串口】如果数据写入，则执行。</span></span><br><span class="line">  &#123;</span><br><span class="line">    X = Serial.read();              <span class="comment">//把写入的数据给到自定义变量  X</span></span><br><span class="line">    BT.print(X);                    <span class="comment">//把数据给蓝牙</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (BT.available())               <span class="comment">//检测：【蓝牙】如果数据写入，则执行。</span></span><br><span class="line">  &#123;</span><br><span class="line">    X = BT.read();                  <span class="comment">//把检测到的数据给到自定义变量 X</span></span><br><span class="line">    Serial.print(X);                <span class="comment">//把从蓝牙得到的数据显示到串口监视器</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(X==<span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;检测到开锁信号，正在开锁&quot;</span>);</span><br><span class="line">    myservo.write(<span class="number">180</span>);            </span><br><span class="line">    delay(<span class="number">8000</span>);</span><br><span class="line">    X=<span class="string">&#x27;L&#x27;</span>; </span><br><span class="line">    Serial.println(<span class="string">&quot;开锁时间结束&quot;</span>);  </span><br><span class="line">    delay(<span class="number">100</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(X!=<span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">  &#123; </span><br><span class="line">    myservo.write(<span class="number">0</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>上面的代码并未有什么很难的地方，就是一个基本框架。可以在里面添加很多东西，比如 <code>myservo.write(180);</code>这里是舵机的转动角度，理论上配合合适的时延和不同的转动角度可以办到一些更加精细的活。</p>
<p>还可以在<code>if</code>里添加<code>else</code>做到更多的判定。总的来说这就是个框架，补一补还是能在很多地方的。我懒，就算了，开个门得了。😂</p>
]]></content>
      <categories>
        <category>ardunio</category>
      </categories>
      <tags>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>自学C++_01</title>
    <url>/2021/07/29/%E8%87%AA%E5%AD%A6C-01/</url>
    <content><![CDATA[<h1 id="初学C"><a href="#初学C" class="headerlink" title="初学C++"></a>初学C++</h1><p>在学校的课程里，大一曾学过<code>C语言</code>，当时啥啥分不清，天真的以为<code>C</code>就是<code>C++</code>毕竟当时是一点都不了解，后来在深入学习后才明白<code>C</code>和<code>C++</code>是两个东西。</p>
<p>由于带着<code>C</code>的基础，所以在自学过程中会粗略学习基础，例如输出<code>函数</code>、<code>变量</code>、<code>注释</code>、<code>基本语法</code>。</p>
<p>当然，我还会着重<code>指针</code>相关的知识，毕竟这才是痛点。</p>
<span id="more"></span>

<h2 id="输出Hello-World"><a href="#输出Hello-World" class="headerlink" title="输出Hello World"></a>输出Hello World</h2><p>几乎在我学习和了解到的计算机语言里，都是从如何打印Hello World开始的，比如<code>C</code>、<code>Python</code>、<code>JAVA</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与<code>C</code>中的<code>printf</code>还是不太一样的。</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>和<code>C</code>一样，分单行和多行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>依旧和<code>C</code>一样。</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>



<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>也就是无法修改的变量，C++中有两种。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>



<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><table>
<thead>
<tr>
<th align="left"><strong>asm</strong></th>
<th><strong>do</strong></th>
<th><strong>if</strong></th>
<th><strong>return</strong></th>
<th><strong>typedef</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>auto</strong></td>
<td><strong>double</strong></td>
<td><strong>inline</strong></td>
<td><strong>short</strong></td>
<td><strong>typeid</strong></td>
</tr>
<tr>
<td align="left"><strong>bool</strong></td>
<td><strong>dynamic_cast</strong></td>
<td><strong>int</strong></td>
<td><strong>signed</strong></td>
<td><strong>typename</strong></td>
</tr>
<tr>
<td align="left"><strong>break</strong></td>
<td><strong>else</strong></td>
<td><strong>long</strong></td>
<td><strong>sizeof</strong></td>
<td><strong>union</strong></td>
</tr>
<tr>
<td align="left"><strong>case</strong></td>
<td><strong>enum</strong></td>
<td><strong>mutable</strong></td>
<td><strong>static</strong></td>
<td><strong>unsigned</strong></td>
</tr>
<tr>
<td align="left"><strong>catch</strong></td>
<td><strong>explicit</strong></td>
<td><strong>namespace</strong></td>
<td><strong>static_cast</strong></td>
<td><strong>using</strong></td>
</tr>
<tr>
<td align="left"><strong>char</strong></td>
<td><strong>export</strong></td>
<td><strong>new</strong></td>
<td><strong>struct</strong></td>
<td><strong>virtual</strong></td>
</tr>
<tr>
<td align="left"><strong>class</strong></td>
<td><strong>extern</strong></td>
<td><strong>operator</strong></td>
<td><strong>switch</strong></td>
<td><strong>void</strong></td>
</tr>
<tr>
<td align="left"><strong>const</strong></td>
<td><strong>false</strong></td>
<td><strong>private</strong></td>
<td><strong>template</strong></td>
<td><strong>volatile</strong></td>
</tr>
<tr>
<td align="left"><strong>const_cast</strong></td>
<td><strong>float</strong></td>
<td><strong>protected</strong></td>
<td><strong>this</strong></td>
<td><strong>wchar_t</strong></td>
</tr>
<tr>
<td align="left"><strong>continue</strong></td>
<td><strong>for</strong></td>
<td><strong>public</strong></td>
<td><strong>throw</strong></td>
<td><strong>while</strong></td>
</tr>
<tr>
<td align="left"><strong>default</strong></td>
<td><strong>friend</strong></td>
<td><strong>register</strong></td>
<td><strong>true</strong></td>
<td></td>
</tr>
<tr>
<td align="left"><strong>delete</strong></td>
<td><strong>goto</strong></td>
<td><strong>reinterpret_cast</strong></td>
<td><strong>try</strong></td>
<td></td>
</tr>
</tbody></table>
<p>关键字挺多，希望到时候创建变量别给撞上吧。</p>
<h1 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h1><p>1.不能撞关键字（这个没啥好说的）</p>
<p>2.只能有<code>字母</code>、<code>数字</code>、<code>下划线</code></p>
<p>3.在2的基础上，第一个字符不能是<code>数字</code></p>
<p>4.大小写敏感</p>
<p>总结：和<code>C</code>一样。</p>
]]></content>
      <categories>
        <category>计算机语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
